include "sgbase.csp"

andChildren = (| Eating2 => {Eating2Child}, Eating1 => {Eating1Child} |)

ControlRoot = (tock?_ -> Controller) [] (complete.EA_Region1 -> SKIP)

datatype Trigger = Completed.(CompLabel)

datatype NodeLabel = Fork2_Initial | Standing1 | WaitingRight1 | Phil1_Initial | Eating2 | Free2 | Standing2 | WaitingLeft1 | Philosophers | Phil1Holds2 | Eating1_Initial | DoneEating2 | Free1 | DoneEating1 | Phil2_Initial | Eating1 | ReplacedRight2 | ReplacedRight1 | HasBoth2 | Phil2Holds2 | Phil1Holds1 | Fork1_Initial | Eating2_Initial | HasBoth1 | WaitingLeft2 | Phil2Holds1 | Initial | WaitingRight2 | Phil1 | Fork1 | Phil2 | Fork2 | EA_Region1 | Eating1Child | Eating2Child

datatype Variable = f1 | f2

datatype EdgeLabel = Fork1_Initial___Free1 | Free2___Phil2Holds2 | Phil2Holds1___Free1 | Standing2___Eating2 | Free1___Phil1Holds1 | Phil1Holds2___Free2 | Standing1___Eating1 | Phil1_Initial___Standing1 | ReplacedRight2___DoneEating2 | Eating1_Initial___WaitingLeft1 | Phil1Holds1___Free1 | WaitingRight1___HasBoth1 | WaitingLeft2___WaitingRight2 | ReplacedRight1___DoneEating1 | HasBoth1___ReplacedRight1 | Free1___Phil2Holds1 | Fork2_Initial___Free2 | Phil2Holds2___Free2 | WaitingRight2___HasBoth2 | Eating1___Standing1 | HasBoth2___ReplacedRight2 | Eating2_Initial___WaitingLeft2 | Eating2___Standing2 | Initial___Philosophers | WaitingLeft1___WaitingRight1 | Free2___Phil1Holds2 | Phil2_Initial___Standing2

EventLabel :: {Trigger}

EventLabel = {}

subtype ChartLabel = Phil1 | Fork1 | Phil2 | Fork2 | EA_Region1 | Eating1Child | Eating2Child

subtype TmrLabel = WaitingRight1 | WaitingLeft1 | ReplacedRight2 | ReplacedRight1 | HasBoth2 | HasBoth1 | WaitingLeft2 | WaitingRight2

subtype CompLabel = Eating2 | Eating1 | EA_Region1 | Eating1Child | Eating2Child

Root = ControlRoot [| {| step, transition.EA_Region1, proceed.EA_Region1, stable.EA_Region1, complete.EA_Region1 |} |] Initial__CONTROL

Controller = getInput?input -> (ControlRoot [] ((proceed.EA_Region1.input -> ((step -> Controller) [] (stable.EA_Region1 -> ControlRoot))) [] (((True and True) & (transition.EA_Region1.Initial___Philosophers -> (step -> Controller))) [] STOP)))

Philosophers__CONTROL = Philosophers__PROC /\ STOP

Initial__CONTROL = Initial__PROC /\ ((transition.EA_Region1.Initial___Philosophers -> (step -> Philosophers__CONTROL)) [] STOP)

Philosophers__PROC = Phil1__PROC [| {| step, proceed.EA_Region1, stable.EA_Region1 |} |] (Fork1__PROC [| {| step, proceed.EA_Region1, stable.EA_Region1 |} |] (Phil2__PROC [| {| step, proceed.EA_Region1, stable.EA_Region1 |} |] Fork2__PROC))

Phil1__PROC = Phil1__CONTROL [| {| step, transition.Phil1, proceed.Phil1, stable.Phil1 |} |] Phil1_Initial__CONTROL

Phil1__CONTROL = proceed.EA_Region1?input -> (((stable.EA_Region1 -> (Phil1__CONTROL [] (step -> Phil1__CONTROL))) [] (step -> Phil1__CONTROL)) [] ((proceed.Phil1.input -> ((step -> Phil1__CONTROL) [] (stable.Phil1 -> ((stable.EA_Region1 -> (Phil1__CONTROL [] (step -> Phil1__CONTROL))) [] (step -> Phil1__CONTROL))))) [] (((True and True) & (transition.Phil1.Standing1___Eating1 -> (step -> Phil1__CONTROL))) [] (((True and True) & (transition.Phil1.Phil1_Initial___Standing1 -> (step -> Phil1__CONTROL))) [] ((((member(Completed.Eating1, input)) and True) & (transition.Phil1.Eating1___Standing1 -> (usedEvent.(Completed.Eating1) -> (step -> Phil1__CONTROL)))) [] STOP)))))

Standing1__CONTROL = Standing1__PROC /\ ((transition.Phil1.Standing1___Eating1 -> (step -> Eating1__CONTROL)) [] STOP)

Phil1_Initial__CONTROL = Phil1_Initial__PROC /\ ((transition.Phil1.Phil1_Initial___Standing1 -> (step -> Standing1__CONTROL)) [] STOP)

Eating1__CONTROL = Eating1__PROC /\ ((transition.Phil1.Eating1___Standing1 -> (step -> (endTime.WaitingRight1 -> (endTime.WaitingLeft1 -> (endTime.ReplacedRight1 -> (endTime.HasBoth1 -> Standing1__CONTROL)))))) [] STOP)

Standing1__PROC = Basic

Phil1_Initial__PROC = Basic

Eating1__PROC = ((Eating1Child__PROC [| {| complete |} |] (AndCompletes(Eating1, {}))) [[ isComplete <- (complete.Eating1) ]]) [| {complete.Eating1} |] (complete.Eating1 -> STOP)

Eating1Child__PROC = Eating1Child__CONTROL [| {| step, transition.Eating1Child, proceed.Eating1Child, stable.Eating1Child |} |] Eating1_Initial__CONTROL

Eating1Child__CONTROL = proceed.Phil1?input -> (read.f1?f1134 -> (read.f2?f2135 -> (((stable.Phil1 -> (Eating1Child__CONTROL [] (step -> Eating1Child__CONTROL))) [] (step -> Eating1Child__CONTROL)) [] (((True and True) & (transition.Eating1Child.Eating1_Initial___WaitingLeft1 -> (step -> Eating1Child__CONTROL))) [] (((True and (f1134 == 1)) & (transition.Eating1Child.WaitingRight1___HasBoth1 -> (step -> Eating1Child__CONTROL))) [] (((True and (f2135 != 1)) & (transition.Eating1Child.ReplacedRight1___DoneEating1 -> (step -> Eating1Child__CONTROL))) [] (((True and (f1134 != 1)) & (transition.Eating1Child.HasBoth1___ReplacedRight1 -> (step -> Eating1Child__CONTROL))) [] (((True and (f2135 == 1)) & (transition.Eating1Child.WaitingLeft1___WaitingRight1 -> (step -> Eating1Child__CONTROL))) [] STOP))))))))

WaitingRight1__CONTROL = (startTime.WaitingRight1 -> WaitingRight1__PROC) /\ ((transition.Eating1Child.WaitingRight1___HasBoth1 -> (step -> (endTime.WaitingRight1 -> (endTime.WaitingRight1 -> HasBoth1__CONTROL)))) [] STOP)

WaitingLeft1__CONTROL = (startTime.WaitingLeft1 -> WaitingLeft1__PROC) /\ ((transition.Eating1Child.WaitingLeft1___WaitingRight1 -> (step -> (endTime.WaitingLeft1 -> (endTime.WaitingLeft1 -> WaitingRight1__CONTROL)))) [] STOP)

Eating1_Initial__CONTROL = Eating1_Initial__PROC /\ ((transition.Eating1Child.Eating1_Initial___WaitingLeft1 -> (step -> WaitingLeft1__CONTROL)) [] STOP)

DoneEating1__CONTROL = DoneEating1__PROC /\ STOP

ReplacedRight1__CONTROL = (startTime.ReplacedRight1 -> ReplacedRight1__PROC) /\ ((transition.Eating1Child.ReplacedRight1___DoneEating1 -> (step -> (endTime.ReplacedRight1 -> (endTime.ReplacedRight1 -> DoneEating1__CONTROL)))) [] STOP)

HasBoth1__CONTROL = (startTime.HasBoth1 -> HasBoth1__PROC) /\ ((transition.Eating1Child.HasBoth1___ReplacedRight1 -> (step -> (endTime.HasBoth1 -> (endTime.HasBoth1 -> ReplacedRight1__CONTROL)))) [] STOP)

WaitingRight1__PROC = Basic

WaitingLeft1__PROC = Basic

Eating1_Initial__PROC = Basic

DoneEating1__PROC = Finalize__(Eating1Child)

ReplacedRight1__PROC = Basic

HasBoth1__PROC = Basic

Fork1__PROC = Fork1__CONTROL [| {| step, transition.Fork1, proceed.Fork1, stable.Fork1 |} |] Fork1_Initial__CONTROL

Fork1__CONTROL = proceed.EA_Region1?input -> (read.f1?f1134 -> (getTime.WaitingRight1?tmrWaitingRight1 -> (getTime.ReplacedRight2?tmrReplacedRight2 -> (getTime.HasBoth1?tmrHasBoth1 -> (getTime.WaitingLeft2?tmrWaitingLeft2 -> (((stable.EA_Region1 -> (Fork1__CONTROL [] (step -> Fork1__CONTROL))) [] (step -> Fork1__CONTROL)) [] (((True and True) & (transition.Fork1.Fork1_Initial___Free1 -> (step -> Fork1__CONTROL))) [] (((True and (tmrReplacedRight2 != -1)) & (transition.Fork1.Phil2Holds1___Free1 -> (write.f1.0 -> (step -> Fork1__CONTROL)))) [] (((True and (tmrWaitingRight1 != -1)) & (transition.Fork1.Free1___Phil1Holds1 -> (write.f1.1 -> (step -> Fork1__CONTROL)))) [] (((True and (tmrHasBoth1 != -1)) & (transition.Fork1.Phil1Holds1___Free1 -> (write.f1.0 -> (step -> Fork1__CONTROL)))) [] (((True and (tmrWaitingLeft2 != -1)) & (transition.Fork1.Free1___Phil2Holds1 -> (write.f1.2 -> (step -> Fork1__CONTROL)))) [] STOP)))))))))))

Free1__CONTROL = Free1__PROC /\ ((transition.Fork1.Free1___Phil1Holds1 -> (step -> Phil1Holds1__CONTROL)) [] ((transition.Fork1.Free1___Phil2Holds1 -> (step -> Phil2Holds1__CONTROL)) [] STOP))

Phil1Holds1__CONTROL = Phil1Holds1__PROC /\ ((transition.Fork1.Phil1Holds1___Free1 -> (step -> Free1__CONTROL)) [] STOP)

Fork1_Initial__CONTROL = Fork1_Initial__PROC /\ ((transition.Fork1.Fork1_Initial___Free1 -> (step -> Free1__CONTROL)) [] STOP)

Phil2Holds1__CONTROL = Phil2Holds1__PROC /\ ((transition.Fork1.Phil2Holds1___Free1 -> (step -> Free1__CONTROL)) [] STOP)

Free1__PROC = Basic

Phil1Holds1__PROC = Basic

Fork1_Initial__PROC = Basic

Phil2Holds1__PROC = Basic

Phil2__PROC = Phil2__CONTROL [| {| step, transition.Phil2, proceed.Phil2, stable.Phil2 |} |] Phil2_Initial__CONTROL

Phil2__CONTROL = proceed.EA_Region1?input -> (((stable.EA_Region1 -> (Phil2__CONTROL [] (step -> Phil2__CONTROL))) [] (step -> Phil2__CONTROL)) [] ((proceed.Phil2.input -> ((step -> Phil2__CONTROL) [] (stable.Phil2 -> ((stable.EA_Region1 -> (Phil2__CONTROL [] (step -> Phil2__CONTROL))) [] (step -> Phil2__CONTROL))))) [] (((True and True) & (transition.Phil2.Standing2___Eating2 -> (step -> Phil2__CONTROL))) [] ((((member(Completed.Eating2, input)) and True) & (transition.Phil2.Eating2___Standing2 -> (usedEvent.(Completed.Eating2) -> (step -> Phil2__CONTROL)))) [] (((True and True) & (transition.Phil2.Phil2_Initial___Standing2 -> (step -> Phil2__CONTROL))) [] STOP)))))

Eating2__CONTROL = Eating2__PROC /\ ((transition.Phil2.Eating2___Standing2 -> (step -> (endTime.ReplacedRight2 -> (endTime.HasBoth2 -> (endTime.WaitingLeft2 -> (endTime.WaitingRight2 -> Standing2__CONTROL)))))) [] STOP)

Standing2__CONTROL = Standing2__PROC /\ ((transition.Phil2.Standing2___Eating2 -> (step -> Eating2__CONTROL)) [] STOP)

Phil2_Initial__CONTROL = Phil2_Initial__PROC /\ ((transition.Phil2.Phil2_Initial___Standing2 -> (step -> Standing2__CONTROL)) [] STOP)

Eating2__PROC = ((Eating2Child__PROC [| {| complete |} |] (AndCompletes(Eating2, {}))) [[ isComplete <- (complete.Eating2) ]]) [| {complete.Eating2} |] (complete.Eating2 -> STOP)

Eating2Child__PROC = Eating2Child__CONTROL [| {| step, transition.Eating2Child, proceed.Eating2Child, stable.Eating2Child |} |] Eating2_Initial__CONTROL

Eating2Child__CONTROL = proceed.Phil2?input -> (read.f1?f1134 -> (read.f2?f2135 -> (((stable.Phil2 -> (Eating2Child__CONTROL [] (step -> Eating2Child__CONTROL))) [] (step -> Eating2Child__CONTROL)) [] (((True and (f1134 != 2)) & (transition.Eating2Child.ReplacedRight2___DoneEating2 -> (step -> Eating2Child__CONTROL))) [] (((True and (f1134 == 2)) & (transition.Eating2Child.WaitingLeft2___WaitingRight2 -> (step -> Eating2Child__CONTROL))) [] (((True and (f2135 == 2)) & (transition.Eating2Child.WaitingRight2___HasBoth2 -> (step -> Eating2Child__CONTROL))) [] (((True and (f2135 != 2)) & (transition.Eating2Child.HasBoth2___ReplacedRight2 -> (step -> Eating2Child__CONTROL))) [] (((True and True) & (transition.Eating2Child.Eating2_Initial___WaitingLeft2 -> (step -> Eating2Child__CONTROL))) [] STOP))))))))

DoneEating2__CONTROL = DoneEating2__PROC /\ STOP

ReplacedRight2__CONTROL = (startTime.ReplacedRight2 -> ReplacedRight2__PROC) /\ ((transition.Eating2Child.ReplacedRight2___DoneEating2 -> (step -> (endTime.ReplacedRight2 -> (endTime.ReplacedRight2 -> DoneEating2__CONTROL)))) [] STOP)

HasBoth2__CONTROL = (startTime.HasBoth2 -> HasBoth2__PROC) /\ ((transition.Eating2Child.HasBoth2___ReplacedRight2 -> (step -> (endTime.HasBoth2 -> (endTime.HasBoth2 -> ReplacedRight2__CONTROL)))) [] STOP)

Eating2_Initial__CONTROL = Eating2_Initial__PROC /\ ((transition.Eating2Child.Eating2_Initial___WaitingLeft2 -> (step -> WaitingLeft2__CONTROL)) [] STOP)

WaitingLeft2__CONTROL = (startTime.WaitingLeft2 -> WaitingLeft2__PROC) /\ ((transition.Eating2Child.WaitingLeft2___WaitingRight2 -> (step -> (endTime.WaitingLeft2 -> (endTime.WaitingLeft2 -> WaitingRight2__CONTROL)))) [] STOP)

WaitingRight2__CONTROL = (startTime.WaitingRight2 -> WaitingRight2__PROC) /\ ((transition.Eating2Child.WaitingRight2___HasBoth2 -> (step -> (endTime.WaitingRight2 -> (endTime.WaitingRight2 -> HasBoth2__CONTROL)))) [] STOP)

DoneEating2__PROC = Finalize__(Eating2Child)

ReplacedRight2__PROC = Basic

HasBoth2__PROC = Basic

Eating2_Initial__PROC = Basic

WaitingLeft2__PROC = Basic

WaitingRight2__PROC = Basic

Standing2__PROC = Basic

Phil2_Initial__PROC = Basic

Fork2__PROC = Fork2__CONTROL [| {| step, transition.Fork2, proceed.Fork2, stable.Fork2 |} |] Fork2_Initial__CONTROL

Fork2__CONTROL = proceed.EA_Region1?input -> (read.f2?f2135 -> (getTime.WaitingLeft1?tmrWaitingLeft1 -> (getTime.ReplacedRight1?tmrReplacedRight1 -> (getTime.HasBoth2?tmrHasBoth2 -> (getTime.WaitingRight2?tmrWaitingRight2 -> (((stable.EA_Region1 -> (Fork2__CONTROL [] (step -> Fork2__CONTROL))) [] (step -> Fork2__CONTROL)) [] (((True and (tmrWaitingRight2 != -1)) & (transition.Fork2.Free2___Phil2Holds2 -> (write.f2.2 -> (step -> Fork2__CONTROL)))) [] (((True and (tmrReplacedRight1 != -1)) & (transition.Fork2.Phil1Holds2___Free2 -> (write.f2.0 -> (step -> Fork2__CONTROL)))) [] (((True and True) & (transition.Fork2.Fork2_Initial___Free2 -> (step -> Fork2__CONTROL))) [] (((True and (tmrHasBoth2 != -1)) & (transition.Fork2.Phil2Holds2___Free2 -> (write.f2.0 -> (step -> Fork2__CONTROL)))) [] (((True and (tmrWaitingLeft1 != -1)) & (transition.Fork2.Free2___Phil1Holds2 -> (write.f2.1 -> (step -> Fork2__CONTROL)))) [] STOP)))))))))))

Fork2_Initial__CONTROL = Fork2_Initial__PROC /\ ((transition.Fork2.Fork2_Initial___Free2 -> (step -> Free2__CONTROL)) [] STOP)

Free2__CONTROL = Free2__PROC /\ ((transition.Fork2.Free2___Phil2Holds2 -> (step -> Phil2Holds2__CONTROL)) [] ((transition.Fork2.Free2___Phil1Holds2 -> (step -> Phil1Holds2__CONTROL)) [] STOP))

Phil1Holds2__CONTROL = Phil1Holds2__PROC /\ ((transition.Fork2.Phil1Holds2___Free2 -> (step -> Free2__CONTROL)) [] STOP)

Phil2Holds2__CONTROL = Phil2Holds2__PROC /\ ((transition.Fork2.Phil2Holds2___Free2 -> (step -> Free2__CONTROL)) [] STOP)

Fork2_Initial__PROC = Basic

Free2__PROC = Basic

Phil1Holds2__PROC = Basic

Phil2Holds2__PROC = Basic

Initial__PROC = Basic